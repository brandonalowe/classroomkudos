// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Role {
    USER
    ADMIN
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id       String    @id @default(cuid())
    name     String?   @db.Text
    email    String?   @unique
    image    String?
    role     Role      @default(USER)
    accounts Account[]
    sessions Session[]
    classes  Class[]
}

model Class {
    id       String    @id @default(cuid())
    name     String
    year     Int?
    userId   String
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    students Student[]
    rewards  Reward[]
}

model Student {
    id          String   @id @default(cuid())
    name        String   @db.Text
    points      Int      @default(0)
    classId     String
    img         String?
    dateCreated DateTime @default(now())
    class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Reward {
    id      String  @id @default(cuid())
    name    String
    weight  Int
    classId String
    img     String?
    class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
}
